{"version":3,"sources":["services/notes.js","components/Note.jsx","App.js","index.js"],"names":["baseUrl","defaultExport","getAll","request","axios","get","nonExisting","id","content","date","important","then","response","data","concat","create","newObject","post","update","put","Note","note","toggleImportance","label","onClick","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","console","log","map","i","find","n","changedNote","returnedNotes","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObject","Date","toISOString","Math","random","length","trim","Axios","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"4MACMA,EAAU,mDA6BDC,EANO,CACpBC,OAtBa,WACb,IAAMC,EAAUC,IAAMC,IAAIL,GACpBM,EAAc,CAClBC,GAAI,IACJC,QAAS,mCACTC,KAAM,2BACNC,WAAW,GAEb,OAAOP,EAAQQ,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,OAAOR,OAevDS,OAZa,SAACC,GAEd,OADgBZ,IAAMa,KAAKjB,EAASgB,GACrBL,MAAK,SAACC,GAAD,OAAcA,EAASC,SAW3CK,OARa,SAACX,EAAIS,GAElB,OADgBZ,IAAMe,IAAN,UAAanB,EAAb,YAAwBO,GAAMS,GAC/BL,MAAK,SAACC,GAAD,OAAcA,EAASC,UCT9BO,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKX,UAAY,qBAAuB,iBACtD,OACE,+BACGW,EAAKb,QACN,wBAAQgB,QAASF,EAAjB,SAAoCC,QC6F3BE,EA/FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,kBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,EAAYhC,SAASS,MAAK,SAACwB,GAAD,OAAkBP,EAASO,QACpD,IAEH,IAwDMC,EAAcL,EAAUJ,EAAQA,EAAMU,QAAO,SAAChB,GAAD,OAAUA,EAAKX,aAKlE,OAHA4B,QAAQC,IAAIZ,GACZW,QAAQC,IAAIH,GAGV,gCACE,uCACA,8BACE,yBAAQZ,QAAS,kBAAMQ,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGK,EAAYI,KAAI,SAACnB,EAAMoB,GAAP,OACf,cAAC,EAAD,CAEEpB,KAAMA,EACNC,iBAAkB,kBA1ED,SAACf,GAC1B,IAAMc,EAAOM,EAAMe,MAAK,SAACC,GAAD,OAAOA,EAAEpC,KAAOA,KAClCqC,EAAW,2BAAQvB,GAAR,IAAcX,WAAYW,EAAKX,YAEhDwB,EACGhB,OAAOX,EAAIqC,GACXjC,MAAK,SAACkC,GACLjB,EAASD,EAAMa,KAAI,SAACnB,GAAD,OAAWA,EAAKd,KAAOA,EAAKc,EAAOwB,SAEvDC,OAAM,SAACC,GAAD,OAAWC,MAAM,aAAD,OAAc3B,EAAKb,QAAnB,qBACzBoB,EAASD,EAAMU,QAAO,SAACM,GAAD,OAAOA,EAAEpC,KAAOA,MAgEN0C,CAAmB5B,EAAKd,MAF3CkC,QAMX,uBAAMS,SAjEM,SAACC,GACfA,EAAMC,iBACNd,QAAQC,IAAI,iBAAkBY,EAAME,QACpC,IAAMC,EAAa,CACjB9C,QAASqB,EACTpB,MAAM,IAAI8C,MAAOC,cACjB9C,UAAW+C,KAAKC,SAAW,GAC3BnD,GAAIoB,EAAMgC,OAAS,GAGhB9B,EAAQ+B,QAab1B,EAAYnB,OAAOuC,GAAY3C,MAAK,SAACkC,GACnCjB,EAASD,EAAMb,OAAO+B,IACtBf,EAAW,OAGb+B,IAAM5C,KACJ,mDACAqC,GACA3C,MAAK,SAACC,GACN0B,QAAQC,IAAI3B,EAAU,YACtBgB,EAASD,EAAMb,OAAOF,EAASC,OAC/BiB,EAAW,QAvBXkB,MAAM,wCAsDN,UACE,uBAAOc,MAAOjC,EAASkC,SA5BP,SAACZ,GACrBb,QAAQC,IAAIY,EAAME,OAAOS,OACzBhC,EAAWqB,EAAME,OAAOS,UA2BpB,wBAAQE,KAAK,SAAb,yBCzFRC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7a67cae2.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"https://arcane-tor-55493.herokuapp.com/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 1000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  return request.then((response) => response.data.concat(nonExisting));\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nconst defaultExport = {\n  getAll,\n  create,\n  update,\n};\n\nexport default defaultExport;\n","import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import React, { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport noteService from \"./services/notes\";\nimport Note from \"./components/Note\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"add a new note\");\n  const [showAll, setShowAll] = useState(true);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => setNotes(initialNotes));\n  }, []);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNotes) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNotes)));\n      })\n      .catch((error) => alert(`the note '${note.content}' was deleted`));\n    setNotes(notes.filter((n) => n.id !== id));\n  };\n\n  const addNote = (event) => {\n    event.preventDefault();\n    console.log(\"button clicked\", event.target);\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1,\n    };\n\n    if (!newNote.trim()) {\n      alert(\"ogbeni , write something there jare\");\n      return;\n    }\n\n    // setNotes(notes.concat(noteObject));\n    // setNewNote(\" \");\n\n    // Axios.get(\"http://localhost:3003/notes\").then((response) => {\n    //   const notes = response.data;\n    //   console.log(notes);\n    // });\n\n    noteService.create(noteObject).then((returnedNotes) => {\n      setNotes(notes.concat(returnedNotes));\n      setNewNote(\"\");\n    });\n\n    Axios.post(\n      \"https://arcane-tor-55493.herokuapp.com/api/notes\",\n      noteObject\n    ).then((response) => {\n      console.log(response, \"success!\");\n      setNotes(notes.concat(response.data));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNewNote = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  console.log(notes);\n  console.log(notesToShow);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => (\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNewNote} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}